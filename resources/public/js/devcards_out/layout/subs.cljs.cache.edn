;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name layout.subs, :imports nil, :requires {re-frame.core re-frame.core, layout.data layout.data}, :uses {subscribe re-frame.core, map->PaintRect layout.data, reg-sub re-frame.core, map->Layout layout.data}, :defs {num-rows {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 17, :column 7, :end-line 17, :end-column 15, :arglists (quote ([{:keys [width height]} aspects]))}, :name layout.subs/num-rows, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 15, :method-params ([p__25127 aspects]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [width height]} aspects]))}, compute-partitions {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 29, :column 7, :end-line 29, :end-column 25, :arglists (quote ([rect items])), :doc "Partition the provided items into 'n' rows, where 'n' depends on\n  'photos-per-screen', and each row has an approximately equal sum of\n  aspect ratios."}, :name layout.subs/compute-partitions, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 25, :method-params ([rect items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rect items])), :doc "Partition the provided items into 'n' rows, where 'n' depends on\n  'photos-per-screen', and each row has an approximately equal sum of\n  aspect ratios."}, fit-last-row {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 70, :column 7, :end-line 70, :end-column 19, :arglists (quote ([row {:keys [width height], :as rect} gap])), :doc "Returns a vector [row-height row], where that `row-height` is defined\n  so that the width of the row fills the provided `rect`."}, :name layout.subs/fit-last-row, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 19, :method-params ([row p__25139 gap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 3, :fn-var true, :arglists (quote ([row {:keys [width height], :as rect} gap])), :doc "Returns a vector [row-height row], where that `row-height` is defined\n  so that the width of the row fills the provided `rect`."}, linear-partition {:name layout.subs/linear-partition, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 15, :column 1, :end-line 15, :end-column 26, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 15, :column 10, :end-line 15, :end-column 26}}, scale-rows {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 87, :column 7, :end-line 87, :end-column 17, :arglists (quote ([{:keys [width], :as rect} rows gap])), :doc "Returns a layout where each element of 'rows' is scaled to fit\n  the width of the enclosing 'rect' with 'gap' pixels between each\n  item on all sides.\n\n  The value returned implements IWillLayout and can participate in other\n  layouts."}, :name layout.subs/scale-rows, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 17, :method-params ([p__25145 rows gap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [width], :as rect} rows gap])), :doc "Returns a layout where each element of 'rows' is scaled to fit\n  the width of the enclosing 'rect' with 'gap' pixels between each\n  item on all sides.\n\n  The value returned implements IWillLayout and can participate in other\n  layouts."}, selector {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 5, :column 7, :end-line 5, :end-column 15, :arglists (quote ([key-fn coll]))}, :name layout.subs/selector, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 15, :method-params ([key-fn coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-fn coll]))}, compute-rows {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 39, :column 7, :end-line 39, :end-column 19, :arglists (quote ([rect items])), :doc "Given a layout container rect and a sequence of items, return a sequence\n  of item sequences, where the sum of aspects in each item sequence is\n  as equal as possible."}, :name layout.subs/compute-rows, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 19, :method-params ([rect items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rect items])), :doc "Given a layout container rect and a sequence of items, return a sequence\n  of item sequences, where the sum of aspects in each item sequence is\n  as equal as possible."}, fit-rows {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 81, :column 7, :end-line 81, :end-column 15, :arglists (quote ([rows rect gap]))}, :name layout.subs/fit-rows, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 15, :method-params ([rows rect gap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rows rect gap]))}, fit-row {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 62, :column 7, :end-line 62, :end-column 14, :arglists (quote ([row rect gap])), :doc "Returns a pair [row-height row], so 'row-height' is defined so\n  that the row takes up the entire width of the enclosing 'rect',\n  accounting for 'gap' pixels between each row item."}, :name layout.subs/fit-row, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 14, :method-params ([row rect gap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 3, :fn-var true, :arglists (quote ([row rect gap])), :doc "Returns a pair [row-height row], so 'row-height' is defined so\n  that the row takes up the entire width of the enclosing 'rect',\n  accounting for 'gap' pixels between each row item."}, clump-layouts {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 167, :column 7, :end-line 167, :end-column 20, :arglists (quote ([{:keys [width], :as rect} gap layouts])), :doc "Takes a window rect, an integer gap, and a sequence of layouts\n  as inputs and returns a sequence of layout rows, so that thin layouts\n  are displayed on the same row."}, :name layout.subs/clump-layouts, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 20, :method-params ([p__25192 gap layouts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [width], :as rect} gap layouts])), :doc "Takes a window rect, an integer gap, and a sequence of layouts\n  as inputs and returns a sequence of layout rows, so that thin layouts\n  are displayed on the same row."}, row-width {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 56, :column 7, :end-line 56, :end-column 16, :arglists (quote ([row {:keys [width]} gap])), :doc "Return the width of the 'row' accounting for 'gap' pixels between\n  each row item."}, :name layout.subs/row-width, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 16, :method-params ([row p__25134 gap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 3, :fn-var true, :arglists (quote ([row {:keys [width]} gap])), :doc "Return the width of the 'row' accounting for 'gap' pixels between\n  each row item."}, photos-per-screen {:name layout.subs/photos-per-screen, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 13, :column 1, :end-line 13, :end-column 23, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 13, :column 6, :end-line 13, :end-column 23}}, row-aspect {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 51, :column 7, :end-line 51, :end-column 17, :arglists (quote ([row]))}, :name layout.subs/row-aspect, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 17, :method-params ([row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([row]))}, item-weight {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :line 27, :column 7, :end-line 27, :end-column 18, :arglists (quote ([item]))}, :name layout.subs/item-weight, :variadic false, :file "/Users/dmitry/research/album/ui_src/layout/subs.cljs", :end-column 18, :method-params ([item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([item]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :scale-rect :base-rect :layouts/grouped-layout :layouts/metrics :default :layouts/perfect-rows :width :layouts/scale-rect :layouts/base-rect :id :x :paint-list :items :layouts/perfect-layout :rect :height}, :order [:width :height :id :x :y :default :rect :paint-list :items :layouts/metrics :layouts/base-rect :base-rect :layouts/scale-rect :scale-rect :layouts/perfect-rows :layouts/perfect-layout :layouts/grouped-layout]}, :doc nil}