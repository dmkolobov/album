;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name layout.events, :imports nil, :requires {re-frame.core re-frame.core}, :uses {reg-event-db re-frame.core, inject-cofx re-frame.core, trim-v re-frame.core, reg-cofx re-frame.core, reg-event-fx re-frame.core}, :defs {LayoutContainer {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name layout.events/LayoutContainer, :file "ui_src/layout/events.cljs", :end-column 27, :type true, :column 12, :internal-ctor true, :line 4, :record true, :end-line 4, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->LayoutContainer {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/events.cljs", :line 4, :column 12, :end-line 4, :end-column 27, :internal-ctor true, :factory :positional, :arglists (quote ([base-rect scale-rect]))}, :name layout.events/->LayoutContainer, :variadic false, :file "ui_src/layout/events.cljs", :end-column 27, :method-params ([base-rect scale-rect]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-rect scale-rect]))}, map->LayoutContainer {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/events.cljs", :line 4, :column 12, :end-line 4, :end-column 27, :internal-ctor true, :factory :map, :arglists (quote ([G__33533]))}, :name layout.events/map->LayoutContainer, :variadic false, :file "ui_src/layout/events.cljs", :end-column 27, :method-params ([G__33533]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__33533]))}, should-layout? {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/events.cljs", :line 6, :column 16, :end-line 6, :end-column 30, :tag boolean, :arglists (quote ([step rect new-rect]))}, :name layout.events/should-layout?, :variadic false, :file "ui_src/layout/events.cljs", :end-column 30, :method-params ([step rect new-rect]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :ret-tag boolean, :end-line 6, :max-fixed-arity 3, :tag boolean, :fn-var true, :arglists (quote ([step rect new-rect]))}, handle-update-metrics {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/events.cljs", :line 13, :column 7, :end-line 13, :end-column 28, :arglists (quote ([{:keys [db]} [layout-id rect step]]))}, :name layout.events/handle-update-metrics, :variadic false, :file "ui_src/layout/events.cljs", :end-column 28, :method-params ([p__33539 p__33540]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [db]} [layout-id rect step]]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:layouts/update-metrics :scale-rect :base-rect :layouts/metrics :db scale-rect base-rect :width}, :order [:base-rect :scale-rect base-rect scale-rect :width :db :layouts/metrics :layouts/update-metrics]}, :doc nil}