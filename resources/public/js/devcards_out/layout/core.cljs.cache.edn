;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name layout.core, :imports nil, :requires {goog.events goog.events, reagent reagent.core, reagent.core reagent.core, re-com.core re-com.core, re-frame.core re-frame.core, layout.subs layout.subs, layout.events layout.events, cljs.pprint cljs.pprint}, :uses {h-box re-com.core, pprint cljs.pprint, subscribe re-frame.core, reg-sub re-frame.core, reg-event-db re-frame.core, dispatch-sync re-frame.core, v-box re-com.core, dispatch re-frame.core}, :defs {Rect {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name layout.core/Rect, :file "ui_src/layout/core.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 13, :record true, :end-line 13, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Rect {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/core.cljs", :line 13, :column 12, :end-line 13, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([width height]))}, :name layout.core/->Rect, :variadic false, :file "ui_src/layout/core.cljs", :end-column 16, :method-params ([width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width height]))}, map->Rect {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/core.cljs", :line 13, :column 12, :end-line 13, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__26259]))}, :name layout.core/map->Rect, :variadic false, :file "ui_src/layout/core.cljs", :end-column 16, :method-params ([G__26259]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__26259]))}, node-dimensions {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/core.cljs", :line 15, :column 7, :end-line 15, :end-column 22, :arglists (quote ([node])), :doc "Given a DOM element, return a map containing the width\n  and height of the element."}, :name layout.core/node-dimensions, :variadic false, :file "ui_src/layout/core.cljs", :end-column 22, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Given a DOM element, return a map containing the width\n  and height of the element."}, resize-handler {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/core.cljs", :line 25, :column 7, :end-line 25, :end-column 21, :arglists (quote ([layout-id node step])), :doc "Creates a function which will update the layout window rects with\n  measurements from 'node' whenever the window resizes."}, :name layout.core/resize-handler, :variadic false, :file "ui_src/layout/core.cljs", :end-column 21, :method-params ([layout-id node step]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([layout-id node step])), :doc "Creates a function which will update the layout window rects with\n  measurements from 'node' whenever the window resizes."}, paint-layout {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/core.cljs", :line 31, :column 7, :end-line 31, :end-column 19, :arglists (quote ([render-fn {:keys [rect paint-list], :as layout}])), :doc "Given a paint list and an item render-fn, render each item in its\n  correct absolute position and with the correct dimensions."}, :name layout.core/paint-layout, :variadic false, :file "ui_src/layout/core.cljs", :end-column 19, :method-params ([render-fn p__26265]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([render-fn {:keys [rect paint-list], :as layout}])), :doc "Given a paint list and an item render-fn, render each item in its\n  correct absolute position and with the correct dimensions."}, measure-node! {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/core.cljs", :line 52, :column 7, :end-line 52, :end-column 20, :arglists (quote ([window-id node step]))}, :name layout.core/measure-node!, :variadic false, :file "ui_src/layout/core.cljs", :end-column 20, :method-params ([window-id node step]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 3, :fn-var true, :arglists (quote ([window-id node step]))}, perfect-layout {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/core.cljs", :line 61, :column 7, :end-line 61, :end-column 21, :arglists (quote ([& {:keys [items item-fn step gap], :or {step 100, gap 0}}])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [items item-fn step gap], :or {step 100, gap 0}})], :arglists ([& {:keys [items item-fn step gap], :or {step 100, gap 0}}]), :arglists-meta (nil)}}, :name layout.core/perfect-layout, :variadic true, :file "ui_src/layout/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [items item-fn step gap], :or {step 100, gap 0}})], :arglists ([& {:keys [items item-fn step gap], :or {step 100, gap 0}}]), :arglists-meta (nil)}, :method-params [({:keys [items item-fn step gap], :or {step 100, gap 0}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [items item-fn step gap], :or {step 100, gap 0}}])}, grouped-layout {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/layout/core.cljs", :line 80, :column 7, :end-line 80, :end-column 21, :arglists (quote ([& {:keys [groups step item-gap group-gap group-fn item-fn], :or {step 100, item-gap 0, group-gap 5}}])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [groups step item-gap group-gap group-fn item-fn], :or {step 100, item-gap 0, group-gap 5}})], :arglists ([& {:keys [groups step item-gap group-gap group-fn item-fn], :or {step 100, item-gap 0, group-gap 5}}]), :arglists-meta (nil)}}, :name layout.core/grouped-layout, :variadic true, :file "ui_src/layout/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [groups step item-gap group-gap group-fn item-fn], :or {step 100, item-gap 0, group-gap 5}})], :arglists ([& {:keys [groups step item-gap group-gap group-fn item-fn], :or {step 100, item-gap 0, group-gap 5}}]), :arglists-meta (nil)}, :method-params [({:keys [groups step item-gap group-gap group-fn item-fn], :or {step 100, item-gap 0, group-gap 5}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [groups step item-gap group-gap group-fn item-fn], :or {step 100, item-gap 0, group-gap 5}}])}}, :require-macros {reagent reagent.core, reagent.core reagent.core, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:y :layouts/update-metrics :item-fn :children height :key :layouts/grouped-layout :top :default :component-did-mount :width :size :style :div width :reagent-render :id :class :gap :group-gap :position :x :paint-list :groups :items :layouts/perfect-layout :item-gap :group-fn :rect :step :height :left}, :order [:width :height width height :layouts/update-metrics :rect :paint-list :id :div :style :position :x :y :left :top :key :items :item-fn :step :gap :layouts/perfect-layout :component-did-mount :reagent-render :groups :item-gap :group-gap :group-fn :layouts/grouped-layout :class :size :children :default]}, :doc nil}