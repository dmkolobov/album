;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name lib.photos, :imports nil, :requires {re-frame.core re-frame.core, datascript datascript.core, datascript.core datascript.core, data.core data.core, photos data.photos, data.photos data.photos, lib.util lib.util}, :uses {success-ev lib.util, subscribe re-frame.core, reg-sub re-frame.core, reg-event-db re-frame.core, error-ev lib.util, trim-v re-frame.core, query-db data.core, async-action lib.util, reg-event-fx re-frame.core}, :defs {->PhotoDescriptor {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 17, :column 12, :end-line 17, :end-column 27, :internal-ctor true, :factory :positional, :arglists (quote ([id src dst]))}, :name lib.photos/->PhotoDescriptor, :variadic false, :file "ui_src/lib/photos.cljs", :end-column 27, :method-params ([id src dst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 17, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([id src dst]))}, fs {:name lib.photos/fs, :file "ui_src/lib/photos.cljs", :line 9, :column 1, :end-line 9, :end-column 12, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 9, :column 10, :end-line 9, :end-column 12}}, date->day {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 69, :column 7, :end-line 69, :end-column 16, :arglists (quote ([date]))}, :name lib.photos/date->day, :variadic false, :file "ui_src/lib/photos.cljs", :end-column 16, :method-params ([date]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([date]))}, map->PhotoDescriptor {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 17, :column 12, :end-line 17, :end-column 27, :internal-ctor true, :factory :map, :arglists (quote ([G__25410]))}, :name lib.photos/map->PhotoDescriptor, :variadic false, :file "ui_src/lib/photos.cljs", :end-column 27, :method-params ([G__25410]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__25410]))}, pd->copy-event {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 20, :column 7, :end-line 20, :end-column 21, :arglists (quote ([{:keys [src dst]}]))}, :name lib.photos/pd->copy-event, :variadic false, :file "ui_src/lib/photos.cljs", :end-column 21, :method-params ([p__25421]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [src dst]}]))}, collect-dated-photos {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 76, :column 7, :end-line 76, :end-column 27, :arglists (quote ([groups [k results]]))}, :name lib.photos/collect-dated-photos, :variadic false, :file "ui_src/lib/photos.cljs", :end-column 27, :method-params ([groups p__25444]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([groups [k results]]))}, js-uuid {:name lib.photos/js-uuid, :file "ui_src/lib/photos.cljs", :line 11, :column 1, :end-line 11, :end-column 17, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 11, :column 10, :end-line 11, :end-column 17}}, PhotoDescriptor {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name lib.photos/PhotoDescriptor, :file "ui_src/lib/photos.cljs", :end-column 27, :type true, :column 12, :internal-ctor true, :line 17, :record true, :end-line 17, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, random-path {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 13, :column 7, :end-line 13, :end-column 18, :arglists (quote ([]))}, :name lib.photos/random-path, :variadic false, :file "ui_src/lib/photos.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, pd->read-event {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 19, :column 7, :end-line 19, :end-column 21, :arglists (quote ([{:keys [id src]}]))}, :name lib.photos/pd->read-event, :variadic false, :file "ui_src/lib/photos.cljs", :end-column 21, :method-params ([p__25416]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [id src]}]))}, file-path {:name lib.photos/file-path, :file "ui_src/lib/photos.cljs", :line 10, :column 1, :end-line 10, :end-column 19, :meta {:file "/Users/dmitry/research/album/ui_src/lib/photos.cljs", :line 10, :column 10, :end-line 10, :end-column 19}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:path :lib.images/mark-loaded :just :first-dispatch :dst :src-path :db :lib.photos/copy-and-preload dst :src :on-success :main-thread/open-files :all :rules :lib.photos/commit-photos :=> :dispatch :lib.photos/by-date :fs/copy :img/preload :start-import :id src :lib.photos/import :data.core/transact :lib.images/read-data :first-dispatches :trace? :commit-photos :capture :halt? :on-error id :on-open :async-flow :any :dest-path}, :order [:id :src :dst id src dst :lib.images/read-data :lib.photos/copy-and-preload :on-success :on-error :fs/copy :src-path :dest-path :lib.images/mark-loaded :img/preload :path :async-flow :first-dispatch :rules :just :=> :halt? :any :trace? :lib.photos/commit-photos :db :dispatch :data.core/transact :lib.photos/import :commit-photos :first-dispatches :all :capture :start-import :main-thread/open-files :on-open :lib.photos/by-date]}, :doc nil}