;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name day8.re-frame.flow, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core, rule day8.re-frame.rule, day8.re-frame.rule day8.re-frame.rule, matcher day8.re-frame.matcher, day8.re-frame.matcher day8.re-frame.matcher, set clojure.set, clojure.set clojure.set}, :uses nil, :defs {remove-rules {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 21, :column 8, :end-line 21, :end-column 20, :private true, :arglists (quote ([rules removed-rules]))}, :private true, :name day8.re-frame.flow/remove-rules, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :end-column 20, :method-params ([rules removed-rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rules removed-rules]))}, fresh-state {:name day8.re-frame.flow/fresh-state, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 10, :column 1, :end-line 10, :end-column 17, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 10, :column 6, :end-line 10, :end-column 17}}, add-rules {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 13, :column 8, :end-line 13, :end-column 17, :private true, :arglists (quote ([rules new-rules]))}, :private true, :name day8.re-frame.flow/add-rules, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :end-column 17, :method-params ([rules new-rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rules new-rules]))}, ->MachineState {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 7, :column 12, :end-line 7, :end-column 24, :internal-ctor true, :factory :positional, :arglists (quote ([flows rules matcher fired-rules]))}, :name day8.re-frame.flow/->MachineState, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :end-column 24, :method-params ([flows rules matcher fired-rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 7, :end-line 7, :max-fixed-arity 4, :fn-var true, :arglists (quote ([flows rules matcher fired-rules]))}, install {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([{:keys [matcher rules flows], :as time-machine} {:keys [id], :as flow}])), :doc "Incorporate the rules of the given flow into the machine state."}, :name day8.re-frame.flow/install, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :end-column 14, :method-params ([p__27611 p__27612]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [matcher rules flows], :as time-machine} {:keys [id], :as flow}])), :doc "Incorporate the rules of the given flow into the machine state."}, transition {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 57, :column 7, :end-line 57, :end-column 17, :arglists (quote ([{:keys [matcher fired-rules rules], :as time-machine} event-v])), :doc "Given a machine state and an event vector, return a tuple of the machine\n\tstate after seeing the event, and the seq of events to dispatch resulting\n\tfrom the rules fired."}, :name day8.re-frame.flow/transition, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :end-column 17, :method-params ([p__27628 event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [matcher fired-rules rules], :as time-machine} event-v])), :doc "Given a machine state and an event vector, return a tuple of the machine\n\tstate after seeing the event, and the seq of events to dispatch resulting\n\tfrom the rules fired."}, MachineState {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name day8.re-frame.flow/MachineState, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :end-column 24, :type true, :column 12, :internal-ctor true, :line 7, :record true, :end-line 7, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->MachineState {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 7, :column 12, :end-line 7, :end-column 24, :internal-ctor true, :factory :map, :arglists (quote ([G__27593]))}, :name day8.re-frame.flow/map->MachineState, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :end-column 24, :method-params ([G__27593]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27593]))}, uninstall {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 46, :column 7, :end-line 46, :end-column 16, :arglists (quote ([{:keys [fired-rules matcher rules flows], :as time-machine} flow-id])), :doc "Remove all traces of the given flow from the machine state."}, :name day8.re-frame.flow/uninstall, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :end-column 16, :method-params ([p__27621 flow-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [fired-rules matcher rules flows], :as time-machine} flow-id])), :doc "Remove all traces of the given flow from the machine state."}, dep-xform {:name day8.re-frame.flow/dep-xform, :file "resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 29, :column 1, :end-line 29, :end-column 15, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/flow.cljs", :line 29, :column 6, :end-line 29, :end-column 15}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{matcher :events :flows :rules :fired-rules flows :id rules fired-rules :matcher}, :order [:flows :rules :matcher :fired-rules flows rules matcher fired-rules :id :events]}, :doc nil}