;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name day8.re-frame.matcher, :imports nil, :requires {re-frame.core re-frame.core, cljs.pprint cljs.pprint}, :uses {pprint cljs.pprint, trim-v re-frame.core, reg-event-fx re-frame.core}, :defs {add-rule {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :line 5, :column 7, :end-line 5, :end-column 15, :arglists (quote ([matcher {:keys [id events], :as rule}])), :doc "Given a matcher and a flow rule, return a new matcher which\n\tincludes all of the events mentioned in the rule."}, :name day8.re-frame.matcher/add-rule, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :end-column 15, :method-params ([matcher p__27575]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([matcher {:keys [id events], :as rule}])), :doc "Given a matcher and a flow rule, return a new matcher which\n\tincludes all of the events mentioned in the rule."}, add-rules {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :line 17, :column 7, :end-line 17, :end-column 16, :arglists (quote ([matcher rules]))}, :name day8.re-frame.matcher/add-rules, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :end-column 16, :method-params ([matcher rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([matcher rules]))}, removable-path? {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :line 21, :column 8, :end-line 21, :end-column 23, :private true, :arglists (quote ([matcher path]))}, :private true, :name day8.re-frame.matcher/removable-path?, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :end-column 23, :method-params ([matcher path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([matcher path]))}, event-dissoc-path {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :line 27, :column 8, :end-line 27, :end-column 25, :private true, :arglists (quote ([matcher event-v]))}, :private true, :name day8.re-frame.matcher/event-dissoc-path, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :end-column 25, :method-params ([matcher event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([matcher event-v]))}, remove-event {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :line 36, :column 8, :end-line 36, :end-column 20, :private true, :arglists (quote ([matcher event-v]))}, :private true, :name day8.re-frame.matcher/remove-event, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :end-column 20, :method-params ([matcher event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([matcher event-v]))}, remove-rule {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :line 47, :column 7, :end-line 47, :end-column 18, :arglists (quote ([matcher {:keys [id events], :as rule}])), :doc "Given a matcher and a flow rule, return a new matcher without\n\tall of the events mentioned in the rule."}, :name day8.re-frame.matcher/remove-rule, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :end-column 18, :method-params ([matcher p__27582]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([matcher {:keys [id events], :as rule}])), :doc "Given a matcher and a flow rule, return a new matcher without\n\tall of the events mentioned in the rule."}, remove-rules {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :line 60, :column 7, :end-line 60, :end-column 19, :arglists (quote ([matcher rules]))}, :name day8.re-frame.matcher/remove-rules, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :end-column 19, :method-params ([matcher rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([matcher rules]))}, matching-rules {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :line 64, :column 7, :end-line 64, :end-column 21, :arglists (quote ([matcher event-v]))}, :name day8.re-frame.matcher/matching-rules, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/matcher.cljs", :end-column 21, :method-params ([matcher event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([matcher event-v]))}}, :require-macros {cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:events :id}, :order [:id :events]}, :doc nil}