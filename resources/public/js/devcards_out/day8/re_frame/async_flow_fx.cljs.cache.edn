;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name day8.re-frame.async-flow-fx, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core, day8.re-frame.forward-events-fx day8.re-frame.forward-events-fx, flow day8.re-frame.flow, day8.re-frame.flow day8.re-frame.flow}, :uses nil, :defs {halt {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 99, :column 7, :end-line 99, :end-column 11, :arglists (quote ([{:keys [db time-machine]} [db-path flow-id]])), :doc "Uninstall the flow-id flow from the machine state at db-path, and unregister\n\tany forwarded events associated with that flow."}, :name day8.re-frame.async-flow-fx/halt, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :end-column 11, :method-params ([p__27685 p__27686]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [db time-machine]} [db-path flow-id]])), :doc "Uninstall the flow-id flow from the machine state at db-path, and unregister\n\tany forwarded events associated with that flow."}, unique-flow-id {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 9, :column 7, :end-line 9, :end-column 21, :arglists (quote ([])), :doc "Generate a unique flow id."}, :name day8.re-frame.async-flow-fx/unique-flow-id, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Generate a unique flow id."}, intercept {:name day8.re-frame.async-flow-fx/intercept, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 56, :column 1, :end-line 56, :end-column 15, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 56, :column 6, :end-line 56, :end-column 15}}, init {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 64, :column 7, :end-line 64, :end-column 11, :arglists (quote ([{:keys [db time-machine]} [db-path {:keys [id first-dispatch first-dispatches], :as flow}]]))}, :name day8.re-frame.async-flow-fx/init, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :end-column 11, :method-params ([p__27657 p__27658]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [db time-machine]} [db-path {:keys [id first-dispatch first-dispatches], :as flow}]]))}, normalize-dispatches {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 60, :column 7, :end-line 60, :end-column 27, :arglists (quote ([first-dispatch first-dispatches flow]))}, :name day8.re-frame.async-flow-fx/normalize-dispatches, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :end-column 27, :method-params ([first-dispatch first-dispatches flow]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 3, :fn-var true, :arglists (quote ([first-dispatch first-dispatches flow]))}, fx-handler {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([{:keys [db-path id], :or {db-path [:async-flow/state], id (unique-flow-id)}, :as flow}])), :doc "Given a flow, dispatch an event to install the flow into the time machine.\n\tState will be stored in the db-path of the flow, or in the path [:async-flow/state]."}, :name day8.re-frame.async-flow-fx/fx-handler, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :end-column 17, :method-params ([p__27640]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [db-path id], :or {db-path [:async-flow/state], id (unique-flow-id)}, :as flow}])), :doc "Given a flow, dispatch an event to install the flow into the time machine.\n\tState will be stored in the db-path of the flow, or in the path [:async-flow/state]."}, transition {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 87, :column 7, :end-line 87, :end-column 17, :arglists (quote ([{:keys [db time-machine]} [db-path event-v]])), :doc "Transition the machine state at db-path and dispatch all events returned by\n\tthe transition."}, :name day8.re-frame.async-flow-fx/transition, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :end-column 17, :method-params ([p__27675 p__27676]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [db time-machine]} [db-path event-v]])), :doc "Transition the machine state at db-path and dispatch all events returned by\n\tthe transition."}, flow-interceptor {:name day8.re-frame.async-flow-fx/flow-interceptor, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 46, :column 1, :end-line 46, :end-column 22, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 46, :column 6, :end-line 46, :end-column 22}}, get-state {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 27, :column 7, :end-line 27, :end-column 16, :arglists (quote ([{:keys [db event], :as coeffects}])), :doc "All time machine events have the db-path of the machine as their first non-id element.\n\tGiven a coeffects map, adds a key :time-machine to the coeffects with the machine state\n\tstored at the event's db-path as the value."}, :name day8.re-frame.async-flow-fx/get-state, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :end-column 16, :method-params ([p__27645]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [db event], :as coeffects}])), :doc "All time machine events have the db-path of the machine as their first non-id element.\n\tGiven a coeffects map, adds a key :time-machine to the coeffects with the machine state\n\tstored at the event's db-path as the value."}, set-state {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 38, :column 7, :end-line 38, :end-column 16, :arglists (quote ([{:keys [time-machine], :as effects} db-path])), :doc "Given an effects map containing a :time-machine key and a db-path, stores the\n\tvalue of the :time-machine key in the db under db-path"}, :name day8.re-frame.async-flow-fx/set-state, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :end-column 16, :method-params ([p__27652 db-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [time-machine], :as effects} db-path])), :doc "Given an effects map containing a :time-machine key and a db-path, stores the\n\tvalue of the :time-machine key in the db under db-path"}, qualify-halts {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :line 79, :column 7, :end-line 79, :end-column 20, :arglists (quote ([db-path dispatches]))}, :name day8.re-frame.async-flow-fx/qualify-halts, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/async_flow_fx.cljs", :end-column 20, :method-params ([db-path dispatches]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db-path dispatches]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:unregister :first-dispatch :async-flow/init :time-machine :async-flow/transition :flow-interceptor :db :events :forward-events :dispatch-n :db-path :async-flow/state :dispatch-to :event :after :register :id :effects :first-dispatches :coeffects :async-flow/halt :before :async-flow}, :order [:db-path :async-flow/state :id :async-flow/init :async-flow :db :event :time-machine :flow-interceptor :before :coeffects :after :effects :first-dispatch :first-dispatches :dispatch-n :forward-events :register :events :dispatch-to :async-flow/transition :async-flow/halt :unregister]}, :doc nil}