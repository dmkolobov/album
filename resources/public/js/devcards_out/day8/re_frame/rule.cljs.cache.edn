;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name day8.re-frame.rule, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core}, :uses nil, :defs {when->fn {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 71, :column 7, :end-line 71, :end-column 15, :arglists (quote ([when-kw]))}, :name day8.re-frame.rule/when->fn, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 15, :method-params ([when-kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([when-kw]))}, compile {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 95, :column 7, :end-line 95, :end-column 14, :arglists (quote ([flow-id index {:keys [id when event events dispatch dispatch-n halt? capture?], :as rule}]))}, :name day8.re-frame.rule/compile, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 14, :method-params ([flow-id index p__22380]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 3, :fn-var true, :arglists (quote ([flow-id index {:keys [id when event events dispatch dispatch-n halt? capture?], :as rule}]))}, seen-all? {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 22, :column 7, :end-line 22, :end-column 16, :arglists (quote ([{:keys [events seen-events]}])), :doc "Returns true if the rule has seen all of its required events."}, :name day8.re-frame.rule/seen-all?, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 16, :method-params ([p__22360]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [events seen-events]}])), :doc "Returns true if the rule has seen all of its required events."}, ready? {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 11, :column 3, :end-line 11, :end-column 9, :protocol day8.re-frame.rule/IAmRule, :doc "Returns true if the event should be fired.", :arglists (quote ([_]))}, :protocol day8.re-frame.rule/IAmRule, :name day8.re-frame.rule/ready?, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 9, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Returns true if the event should be fired."}, fire {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 5, :column 3, :end-line 5, :end-column 7, :protocol day8.re-frame.rule/IAmRule, :doc "Return a sequence of events which should be dispatched when this rule is fired.", :arglists (quote ([_]))}, :protocol day8.re-frame.rule/IAmRule, :name day8.re-frame.rule/fire, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 7, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc "Return a sequence of events which should be dispatched when this rule is fired."}, Rule {:num-fields 7, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable day8.re-frame.rule/IAmRule cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name day8.re-frame.rule/Rule, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 37, :record true, :end-line 37, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Rule {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 37, :column 12, :end-line 37, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([id when-fn events dispatch-n halt? capture? seen-events]))}, :name day8.re-frame.rule/->Rule, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 16, :method-params ([id when-fn events dispatch-n halt? capture? seen-events]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 37, :end-line 37, :max-fixed-arity 7, :fn-var true, :arglists (quote ([id when-fn events dispatch-n halt? capture? seen-events]))}, IAmRule {:meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 4, :column 14, :end-line 4, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {fire [[_]], record [[_ event-v]], ready? [[_]]}}}, :protocol-symbol true, :name day8.re-frame.rule/IAmRule, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 21, :column 1, :line 4, :protocol-info {:methods {fire [[_]], record [[_ event-v]], ready? [[_]]}}, :info nil, :end-line 4, :impls #{day8.re-frame.rule/Rule}, :doc nil, :jsdoc ("@interface")}, map->Rule {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 37, :column 12, :end-line 37, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__22373]))}, :name day8.re-frame.rule/map->Rule, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 16, :method-params ([G__22373]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22373]))}, matches? {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 16, :column 7, :end-line 16, :end-column 15, :arglists (quote ([pattern event-v]))}, :name day8.re-frame.rule/matches?, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 15, :method-params ([pattern event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pattern event-v]))}, normalize-dispatch {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 77, :column 7, :end-line 77, :end-column 25, :arglists (quote ([dispatch dispatch-n rule]))}, :name day8.re-frame.rule/normalize-dispatch, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 25, :method-params ([dispatch dispatch-n rule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dispatch dispatch-n rule]))}, seen-any? {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 30, :column 7, :end-line 30, :end-column 16, :arglists (quote ([{:keys [events seen-events]}])), :doc "Returns true if the rule has seen any of its required events."}, :name day8.re-frame.rule/seen-any?, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 16, :method-params ([p__22365]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [events seen-events]}])), :doc "Returns true if the rule has seen any of its required events."}, record {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 8, :column 3, :end-line 8, :end-column 9, :protocol day8.re-frame.rule/IAmRule, :doc "Return a new rule which has seen the given event.", :arglists (quote ([_ event-v]))}, :protocol day8.re-frame.rule/IAmRule, :name day8.re-frame.rule/record, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 9, :method-params ([_ event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ event-v])), :doc "Return a new rule which has seen the given event."}, normalize-events {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 86, :column 7, :end-line 86, :end-column 23, :arglists (quote ([event events rule]))}, :name day8.re-frame.rule/normalize-events, :variadic false, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :end-column 23, :method-params ([event events rule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 3, :fn-var true, :arglists (quote ([event events rule]))}, map-when->fn {:name day8.re-frame.rule/map-when->fn, :file "resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 66, :column 1, :end-line 66, :end-column 18, :meta {:file "/Users/dmitry/research/album/resources/public/js/devcards_out/day8/re_frame/rule.cljs", :line 66, :column 6, :end-line 66, :end-column 18}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:seen? halt? :seen-all-of? :else :when :seen-events :events :dispatch-n seen-events events :dispatch :event :seen-both? dispatch-n :id :when-fn :seen-any-of? :capture? :error :async-flow/halt :halt? id when-fn capture?}, :order [:events :seen-events :id :when-fn :dispatch-n :halt? :capture? :async-flow/halt id when-fn events dispatch-n halt? capture? seen-events :seen? :seen-both? :seen-all-of? :seen-any-of? :error :else :when :event :dispatch]}, :doc nil}