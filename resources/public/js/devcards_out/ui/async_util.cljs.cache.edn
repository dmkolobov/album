;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name ui.async-util, :imports nil, :requires {re-frame.core re-frame.core, cljs.pprint cljs.pprint}, :uses {pprint cljs.pprint, reg-event-db re-frame.core, debug re-frame.core, reg-fx re-frame.core, trim-v re-frame.core, dispatch re-frame.core, reg-event-fx re-frame.core}, :defs {async-action {:name ui.async-util/async-action, :file "/Users/dmitry/research/album/ui_src/ui/async_util.cljs", :line 5, :column 1, :end-line 5, :end-column 18, :meta {:file "/Users/dmitry/research/album/ui_src/ui/async_util.cljs", :line 5, :column 6, :end-line 5, :end-column 18}}, reg-fx-service {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/ui/async_util.cljs", :line 21, :column 7, :end-line 21, :end-column 21, :arglists (quote ([fx-id fx-handler])), :doc "Register an fx handler which performs some async action, and should dispatch\n  a success or error event depending on the result of the action, specified by\n  the :on-success and :on-error entries in its argument map. Creates an event handler\n  which when given an [fx-id [fx-map-args]] event-v, will merge the result events\n  {:on-success [:async/success event-v] :on-error [:async/error event-v]}\n  into fx-map-args before invoking the fx-id fx."}, :name ui.async-util/reg-fx-service, :variadic false, :file "/Users/dmitry/research/album/ui_src/ui/async_util.cljs", :end-column 21, :method-params ([fx-id fx-handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fx-id fx-handler])), :doc "Register an fx handler which performs some async action, and should dispatch\n  a success or error event depending on the result of the action, specified by\n  the :on-success and :on-error entries in its argument map. Creates an event handler\n  which when given an [fx-id [fx-map-args]] event-v, will merge the result events\n  {:on-success [:async/success event-v] :on-error [:async/error event-v]}\n  into fx-map-args before invoking the fx-id fx."}}, :require-macros {cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:on-success :async-action :event :id :async/error :async/success :coeffects :on-error :before}, :order [:id :async-action :before :coeffects :event :on-success :async/success :on-error :async/error]}, :doc nil}