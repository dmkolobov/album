;; Analyzed by ClojureScript 1.8.40
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name ui.views.common.drawer, :imports nil, :requires {re-com.core re-com.core, reagent reagent.core, reagent.core reagent.core, async cljs.core.async, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, chan cljs.core.async, box re-com.core, put! cljs.core.async}, :defs {translate-3d {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 38, :column 7, :end-line 38, :end-column 19, :arglists (quote ([x y]))}, :name ui.views.common.drawer/translate-3d, :variadic false, :file "ui_src/views/common/drawer.cljs", :end-column 19, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, throttle-chan {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 94, :column 7, :end-line 94, :end-column 20, :arglists (quote ([c ms]))}, :name ui.views.common.drawer/throttle-chan, :variadic false, :file "ui_src/views/common/drawer.cljs", :end-column 20, :method-params ([c ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c ms]))}, animate! {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 78, :column 7, :end-line 78, :end-column 15, :arglists (quote ([node callback {:keys [initial final duration delay ease], :or {ease "cubic-bezier(0.075, 0.82, 0.165, 1)"}}]))}, :name ui.views.common.drawer/animate!, :variadic false, :file "ui_src/views/common/drawer.cljs", :end-column 15, :method-params ([node callback p__39138]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node callback {:keys [initial final duration delay ease], :or {ease "cubic-bezier(0.075, 0.82, 0.165, 1)"}}]))}, layout {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 40, :column 7, :end-line 40, :end-column 13, :arglists (quote ([keys nodes]))}, :name ui.views.common.drawer/layout, :variadic false, :file "ui_src/views/common/drawer.cljs", :end-column 13, :method-params ([keys nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keys nodes]))}, transition {:name ui.views.common.drawer/transition, :file "ui_src/views/common/drawer.cljs", :line 7, :column 1, :end-line 7, :end-column 16, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 7, :column 6, :end-line 7, :end-column 16}}, register-child {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 31, :column 7, :end-line 31, :end-column 21, :arglists (quote ([state key node callback]))}, :name ui.views.common.drawer/register-child, :variadic false, :file "ui_src/views/common/drawer.cljs", :end-column 21, :method-params ([state key node callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 4, :fn-var true, :arglists (quote ([state key node callback]))}, resize-sequence {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 66, :column 7, :end-line 66, :end-column 22, :arglists (quote ([pw w offsets]))}, :name ui.views.common.drawer/resize-sequence, :variadic false, :file "ui_src/views/common/drawer.cljs", :end-column 22, :method-params ([pw w offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pw w offsets]))}, animation-scale {:name ui.views.common.drawer/animation-scale, :file "ui_src/views/common/drawer.cljs", :line 76, :column 1, :end-line 76, :end-column 21, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 76, :column 6, :end-line 76, :end-column 21}}, drawer {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 103, :column 7, :end-line 103, :end-column 13, :arglists (quote ([& _])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(_)], :arglists ([& _]), :arglists-meta (nil)}}, :name ui.views.common.drawer/drawer, :variadic true, :file "ui_src/views/common/drawer.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(_)], :arglists ([& _]), :arglists-meta (nil)}, :method-params [(_)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 0, :fn-var true, :arglists ([& _])}, intro-sequence {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 57, :column 7, :end-line 57, :end-column 21, :arglists (quote ([_ max-width offsets]))}, :name ui.views.common.drawer/intro-sequence, :variadic false, :file "ui_src/views/common/drawer.cljs", :end-column 21, :method-params ([_ max-width offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_ max-width offsets]))}, drawer-child {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/drawer.cljs", :line 10, :column 7, :end-line 10, :end-column 19, :arglists (quote ([enter resize]))}, :name ui.views.common.drawer/drawer-child, :variadic false, :file "ui_src/views/common/drawer.cljs", :end-column 19, :method-params ([enter resize]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([enter resize]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:children :key :else :prev-width :name :component-did-mount :parent-node :component-did-update :recur :duration :final :callbacks :div.drawer :style :ease :component-will-appear :reagent-render :nodes :class :initial :component-will-mount :position :child :delay}, :order [:component-will-appear :component-did-mount :reagent-render :class :style :position :child :nodes :callbacks :initial :final :duration :delay :ease :recur :else :parent-node :prev-width :component-will-mount :component-did-update :children :key :div.drawer :name]}, :doc nil}