;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name ui.views.common.images, :imports nil, :requires {re-frame.core re-frame.core, re-com.core re-com.core}, :uses {subscribe re-frame.core, box re-com.core, throbber re-com.core}, :defs {absolute-image {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/images.cljs", :line 5, :column 7, :end-line 5, :end-column 21, :arglists (quote ([& {:keys [path on-click]}])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [path on-click]})], :arglists ([& {:keys [path on-click]}]), :arglists-meta (nil)}}, :name ui.views.common.images/absolute-image, :variadic true, :file "ui_src/views/common/images.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [path on-click]})], :arglists ([& {:keys [path on-click]}]), :arglists-meta (nil)}, :method-params [({:keys [path on-click]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [path on-click]}])}, square {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/images.cljs", :line 19, :column 7, :end-line 19, :end-column 13, :arglists (quote ([path aspect]))}, :name ui.views.common.images/square, :variadic false, :file "ui_src/views/common/images.cljs", :end-column 13, :method-params ([path aspect]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path aspect]))}, landscape {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/images.cljs", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([path _]))}, :name ui.views.common.images/landscape, :variadic false, :file "ui_src/views/common/images.cljs", :end-column 16, :method-params ([path _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path _]))}, portrait {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/images.cljs", :line 36, :column 7, :end-line 36, :end-column 15, :arglists (quote ([path aspect]))}, :name ui.views.common.images/portrait, :variadic false, :file "ui_src/views/common/images.cljs", :end-column 15, :method-params ([path aspect]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path aspect]))}, image {:protocol-inline nil, :meta {:file "/Users/dmitry/research/album/ui_src/views/common/images.cljs", :line 46, :column 7, :end-line 46, :end-column 12, :arglists (quote ([path aspect])), :doc "Display an image so that it fills as much content as it can\n  while preserving aspect ratio. Requires that the parent element\n  has CSS positioning other than 'fixed'"}, :name ui.views.common.images/image, :variadic false, :file "ui_src/views/common/images.cljs", :end-column 12, :method-params ([path aspect]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path aspect])), :doc "Display an image so that it fills as much content as it can\n  while preserving aspect ratio. Requires that the parent element\n  has CSS positioning other than 'fixed'"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:path :align :max-height :bottom :top :img.image :width :src :max-width :on-click :size :center :style :div :padding-left :right :display :position :child :height :left :margin}, :order [:path :on-click :img.image :src :style :max-height :bottom :top :max-width :right :display :position :left :margin :div :width :height :padding-left :size :align :center :child]}, :doc nil}